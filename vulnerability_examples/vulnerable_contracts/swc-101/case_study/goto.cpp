Generating GOTO Program
GOTO program creation time: 0.294s
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

pthread_start_main_hook (c:@F@pthread_start_main_hook):
        // 0 file pthread_lib.c line 118 function pthread_start_main_hook
        ATOMIC_BEGIN
        // 1 file pthread_lib.c line 119 function pthread_start_main_hook
        __ESBMC_num_total_threads=__ESBMC_num_total_threads + 1;
        // 2 file pthread_lib.c line 120 function pthread_start_main_hook
        __ESBMC_num_threads_running=__ESBMC_num_threads_running + 1;
        // 3 file pthread_lib.c line 121 function pthread_start_main_hook
        ATOMIC_END
        // 4 file pthread_lib.c line 122 function pthread_start_main_hook
        END_FUNCTION // pthread_start_main_hook
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

pthread_end_main_hook (c:@F@pthread_end_main_hook):
        // 5 file pthread_lib.c line 130 function pthread_end_main_hook
        ATOMIC_BEGIN
        // 6 file pthread_lib.c line 131 function pthread_end_main_hook
        __ESBMC_num_threads_running=__ESBMC_num_threads_running - 1;
        // 7 file pthread_lib.c line 132 function pthread_end_main_hook
        END_FUNCTION // pthread_end_main_hook
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

__ESBMC_sync_fetch_and_add (c:@F@__ESBMC_sync_fetch_and_add):
        // 8 file builtin_libs.c line 14 function __ESBMC_sync_fetch_and_add
        ATOMIC_BEGIN
        // 9 file builtin_libs.c line 15 function __ESBMC_sync_fetch_and_add
        signed int initial;
        // 10 file builtin_libs.c line 15 function __ESBMC_sync_fetch_and_add
        initial=*ptr;
        // 11 file builtin_libs.c line 16 function __ESBMC_sync_fetch_and_add
        *ptr=*ptr + value;
        // 12 file builtin_libs.c line 17 function __ESBMC_sync_fetch_and_add
        ATOMIC_END
        // 13 file builtin_libs.c line 18 function __ESBMC_sync_fetch_and_add
        RETURN: initial
        // 14 file builtin_libs.c line 19 function __ESBMC_sync_fetch_and_add
        END_FUNCTION // __ESBMC_sync_fetch_and_add
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

main (c:@F@main):
        // 15 file main.c line 2 function main
        RETURN: 0
        // 16 file main.c line 3 function main
        END_FUNCTION // main
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

nondet (sol:@F@nondet):
        // 17 file MyContract_case_study.sol line 1 function nondet
        unsigned char i;
        // 18
        RETURN: i
        // 19 file MyContract_case_study.sol line 1 function nondet
        END_FUNCTION // nondet
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

get_x (sol:@F@get_x):
        // 20 file MyContract_case_study.sol line 1 function get_x
        x=253;
        // 21
        RETURN: x
        // 22 file MyContract_case_study.sol line 1 function get_x
        END_FUNCTION // get_x
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

func_case_study (sol:@F@func_case_study):
        // 23 file MyContract_case_study.sol line 1 function func_case_study
        unsigned char y;
        // 24 file MyContract_case_study.sol line 1 function func_case_study
        unsigned char return_value$_nondet$1;
        // 25 file MyContract_case_study.sol line 1 function func_case_study
        FUNCTION_CALL:  return_value$_nondet$1=nondet()
        // 26 file MyContract_case_study.sol line 1 function func_case_study
        y=return_value$_nondet$1;
        // 27 file MyContract_case_study.sol line 1 function func_case_study
        unsigned char sum;
        // 28 file MyContract_case_study.sol line 1 function func_case_study
        FUNCTION_CALL:  x=get_x()
        // 29 no location
        IF !((signed int)y > (signed int)x) THEN GOTO 1
        // 30 file MyContract_case_study.sol line 1 function func_case_study
        unsigned char return_value$_get_x$2;
        // 31 file MyContract_case_study.sol line 1 function func_case_study
        FUNCTION_CALL:  return_value$_get_x$2=get_x()
        // 32 file MyContract_case_study.sol line 1 function func_case_study
        sum=(unsigned char)((signed int)return_value$_get_x$2 + 10);
        // 33 file MyContract_case_study.sol line 1 function func_case_study
        dead return_value$_get_x$2;
        // 34 file MyContract_case_study.sol line 1 function func_case_study
        GOTO 2
        // 35 file MyContract_case_study.sol line 1 function func_case_study
     1: sum=(unsigned char)((signed int)x + 1);
        // 36 file MyContract_case_study.sol line 1 function func_case_study
     2: ASSERT (signed int)sum > 100
        // 37 file MyContract_case_study.sol line 1 function func_case_study
        dead sum;
        // 38 file MyContract_case_study.sol line 1 function func_case_study
        dead y;
        // 39 file MyContract_case_study.sol line 1 function func_case_study
        dead return_value$_nondet$1;
        // 40 file MyContract_case_study.sol line 1 function func_case_study
        END_FUNCTION // func_case_study
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

__ESBMC_main (__ESBMC_main):
        // 41 file esbmc_intrinsics.h line 16
        __ESBMC_alloc=ARRAY_OF(0);
        // 42 file esbmc_intrinsics.h line 19
        __ESBMC_deallocated=ARRAY_OF(0);
        // 43 file esbmc_intrinsics.h line 22
        __ESBMC_is_dynamic=ARRAY_OF(0);
        // 44 file esbmc_intrinsics.h line 25
        __ESBMC_alloc_size=ARRAY_OF(0);
        // 45 file esbmc_intrinsics.h line 30
        __ESBMC_rounding_mode=0;
        // 46 file MyContract_case_study.sol line 1
        x=0;
        // 47 file pthread_lib.c line 54
        __ESBMC_num_threads_running=0;
        // 48 file pthread_lib.c line 53
        __ESBMC_num_total_threads=0;
        // 49 no location
        FUNCTION_CALL:  pthread_start_main_hook()
        // 50 no location
        FUNCTION_CALL:  func_case_study()
        // 51 no location
        FUNCTION_CALL:  pthread_end_main_hook()
        // 52 file MyContract_case_study.sol line 1 function func_case_study
        END_FUNCTION // func_case_study

