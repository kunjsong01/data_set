// SPDX-License-Identifier: GPL-3.0
pragma solidity >=0.4.26;

contract MyContract {
    uint8 _x;
    uint8 _y;
    uint8 sum;

    /*
    // 1. independent function
    function independent_func() external {
      _x = 3;
      _x = _x - 1;
      _x = _x - 3;
      assert(_x < 5);
    }

    // 2. Function without return
    function increment_x() public {
      _x = _x + 3;
    }

    // 3. Function with return
    function get_x() public returns(uint8)
    {
      _x = 101;
      return _x;
    }
    */

    // 4. nondet
    function nondet() public pure returns(uint8)
    {
      uint8 i;
      return i;
    }

    // 5. support for __ESBMC_assume
    function __ESBMC_assume(bool) internal pure { }

    function func_overflow() external {
      _y = 240;
      uint8 _z = nondet();
      sum = _y + _z;

      // Additional constraints here
      __ESBMC_assume(_z < 255);
      __ESBMC_assume(_z > 220);
      __ESBMC_assume(_z != 240);
      __ESBMC_assume(_z != 224);

      // Property
      assert(sum % 16 != 0);
    }
}

/*
C  = [ _y=240 /\ _z=nondet()]

~P = [ sum == 0]

C /\ ~P

satisfiable?

*/

/*
  __ESBMC_assume(_z % 16 != 0);
  assert(sum != 0);

  __ESBMC_assume(_z < 255);
  __ESBMC_assume(_z > 220);
  __ESBMC_assume(_z != 240); // 240 = 16 * 15;
  __ESBMC_assume(_z != 224); // 224 = 16 * 14;
  assert(sum % 16 != 0);
*/
